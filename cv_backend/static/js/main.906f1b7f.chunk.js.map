{"version":3,"sources":["pics.js","detection.js","sift.js","stitch.js","App.js","serviceWorker.js","index.js"],"names":["getBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","PicturesWall","state","previewVisible","previewImage","previewTitle","fileList","max_pic","props","transformFile","compressThreshold","isPictureCompress","pictureQuality","size","setState","spinLoading","canvas","document","createElement","img","src","ctx","getContext","originImageWidth","width","originImageHeight","height","targetWidth","targetHeight","Math","round","clearRect","drawImage","imageDataURL","toDataURL","type","imageBytes","window","atob","split","arrayBuffer","ArrayBuffer","length","uint8Array","Uint8Array","i","charCodeAt","mimeType","match","newFile","File","name","then","res","catch","e","handleCancel","handlePreview","a","url","preview","originFileObj","substring","lastIndexOf","handleChange","this","uploadButton","PlusOutlined","className","action","listType","onPreview","onChange","visible","title","footer","onCancel","alt","style","React","Component","Title","Typography","Paragraph","Detection","Text","formItemLayout","labelCol","span","wrapperCol","onFinish","values","console","log","level","gutter","xs","sm","md","lg","bordered","Item","label","offset","htmlType","image","Empty","PRESENTED_IMAGE_SIMPLE","Sift","Stitch","Header","Layout","Content","Sider","Footer","App","handleClick","key","content","toggleCollapsed","collapsed","CodeSandboxOutlined","padding","onClick","marginBottom","MenuUnfoldOutlined","MenuFoldOutlined","mode","defaultSelectedKeys","theme","icon","MonitorOutlined","PictureOutlined","ProjectOutlined","Boolean","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.906f1b7f.chunk.js","sourcesContent":["import { Upload, Modal } from 'antd';\r\nimport { PlusOutlined } from '@ant-design/icons';\r\nimport React from 'react';\r\n\r\nfunction getBase64(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = error => reject(error);\r\n  });\r\n}\r\n\r\nexport default class PicturesWall extends React.Component {\r\n  state = {\r\n    previewVisible: false,\r\n    previewImage: '',\r\n    previewTitle: '',\r\n    fileList: [],\r\n    max_pic:this.props.max_pic\r\n  };\r\n\r\n  transformFile = (file) => {\r\n    /**\r\n     * 针对图片进行压缩,如果图片大小超过压缩阈值,则执行压缩,否则不压缩\r\n     */\r\n        const {compressThreshold = 1, isPictureCompress = true, pictureQuality = 0.92} = this.props;\r\n        let fileSize = file.size / 1024 / 1024;\r\n        // console.log('before compress, the file size is : ', fileSize + \"M\");\r\n        //当开启图片压缩且图片大小大于等于压缩阈值,进行压缩\r\n        if ((fileSize >= compressThreshold) && isPictureCompress) {\r\n            //判断浏览器内核是否支持base64图片压缩\r\n            if (typeof (FileReader) === 'undefined') {\r\n                return file;\r\n            } else {\r\n                try {\r\n                    this.setState({\r\n                        spinLoading: true\r\n                    });\r\n                    return new Promise(resolve => {\r\n                        //声明FileReader文件读取对象\r\n                        const reader = new FileReader();\r\n                        reader.readAsDataURL(file);\r\n                        reader.onload = () => {\r\n                            // 生成canvas画布\r\n                            const canvas = document.createElement('canvas');\r\n                            // 生成img\r\n                            const img = document.createElement('img');\r\n                            img.src = reader.result;\r\n                            img.onload = () => {\r\n                                const ctx = canvas.getContext('2d');\r\n                                //原始图片宽度、高度\r\n                                let originImageWidth = img.width, originImageHeight = img.height;\r\n                                //默认最大尺度的尺寸限制在（1920 * 1080）\r\n                                let maxWidth = 1920, maxHeight = 1080, ratio = maxWidth / maxHeight;\r\n                                //目标尺寸\r\n                                let targetWidth = originImageWidth, targetHeight = originImageHeight;\r\n                                //当图片的宽度或者高度大于指定的最大宽度或者最大高度时,进行缩放图片\r\n                                if (originImageWidth > maxWidth || originImageHeight > maxHeight) {\r\n                                    //超过最大宽高比例\r\n                                    if ((originImageWidth / originImageHeight) > ratio) {\r\n                                        //宽度取最大宽度值maxWidth,缩放高度\r\n                                        targetWidth = maxWidth;\r\n                                        targetHeight = Math.round(maxWidth * (originImageHeight / originImageWidth));\r\n                                    } else {\r\n                                        //高度取最大高度值maxHeight,缩放宽度\r\n                                        targetHeight = maxHeight;\r\n                                        targetWidth = Math.round(maxHeight * (originImageWidth / originImageHeight));\r\n                                    }\r\n                                }\r\n                                // canvas对图片进行缩放\r\n                                canvas.width = targetWidth;\r\n                                canvas.height = targetHeight;\r\n                                // 清除画布\r\n                                ctx.clearRect(0, 0, targetWidth, targetHeight);\r\n                                // 绘制图片\r\n                                ctx.drawImage(img, 0, 0, targetWidth, targetHeight);\r\n                                // quality值越小,图像越模糊,默认图片质量为0.92\r\n                                const imageDataURL = canvas.toDataURL(file.type || 'image/jpeg', pictureQuality);\r\n                                // 去掉URL的头,并转换为byte\r\n                                const imageBytes = window.atob(imageDataURL.split(',')[1]);\r\n                                // 处理异常,将ascii码小于0的转换为大于0\r\n                                const arrayBuffer = new ArrayBuffer(imageBytes.length);\r\n                                const uint8Array = new Uint8Array(arrayBuffer);\r\n                                for (let i = 0; i < imageBytes.length; i++) {\r\n                                    uint8Array[i] = imageBytes.charCodeAt(i);\r\n                                }\r\n                                let mimeType = imageDataURL.split(',')[0].match(/:(.*?);/)[1];\r\n                                let newFile = new File([uint8Array], file.name, {type: mimeType || 'image/jpeg'});\r\n                                // console.log('after compress, the file size is : ', (newFile.size / 1024 / 1024) + \"M\");\r\n                                resolve(newFile);\r\n                            };\r\n                        };\r\n                        reader.onerror = () => {\r\n                            this.setState({\r\n                                spinLoading: false\r\n                            });\r\n                            return file;\r\n                        }\r\n                    }).then(res => {\r\n                        this.setState({\r\n                            spinLoading: false\r\n                        });\r\n                        return res;\r\n                    }).catch(() => {\r\n                        this.setState({\r\n                            spinLoading: false\r\n                        });\r\n                        return file;\r\n                    });\r\n                } catch (e) {\r\n                    this.setState({\r\n                        spinLoading: false\r\n                    });\r\n                    //压缩出错,直接返回原file对象\r\n                    return file;\r\n                }\r\n            }\r\n        } else {\r\n            //不需要压缩，直接返回原file对象\r\n            return file;\r\n        }\r\n  };\r\n\r\n  handleCancel = () => this.setState({ previewVisible: false });\r\n\r\n  handlePreview = async file => {\r\n    if (!file.url && !file.preview) {\r\n      file.preview = await getBase64(file.originFileObj);\r\n    }\r\n\r\n    this.setState({\r\n      previewImage: file.url || file.preview,\r\n      previewVisible: true,\r\n      previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1),\r\n    });\r\n  };\r\n\r\n  handleChange = ({ fileList }) => this.setState({ fileList });\r\n\r\n  render() {\r\n    const { previewVisible, previewImage, fileList, previewTitle } = this.state;\r\n    const uploadButton = (\r\n      <div>\r\n        <PlusOutlined />\r\n        <div className=\"ant-upload-text\">Upload</div>\r\n      </div>\r\n    );\r\n    return (\r\n      <div className=\"clearfix\">\r\n        <Upload\r\n          action=\"http://49.235.62.59/cv_upload\"\r\n          listType=\"picture-card\"\r\n          fileList={fileList}\r\n          transformFile={this.transformFile}\r\n          onPreview={this.handlePreview}\r\n          onChange={this.handleChange}\r\n          isPictureCompress={true} //是否开启图片压缩\r\n          pictureQuality={0.92}   //图片质量\r\n          compressThreshold={1}  //压缩阈值\r\n        >\r\n          {fileList.length >= this.state.max_pic ? null : uploadButton}\r\n        </Upload>\r\n        <Modal\r\n          visible={previewVisible}\r\n          title={previewTitle}\r\n          footer={null}\r\n          onCancel={this.handleCancel}\r\n        >\r\n          <img alt=\"example\" style={{ width: '100%' }} src={previewImage} />\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport PicturesWall from './pics'\r\nimport {Form,Button, Typography, Divider,Row, Col,Card,Empty} from 'antd';\r\n\r\nconst { Title, Paragraph, Text } = Typography;\r\n\r\nexport default class Detection extends React.Component{\r\n  formItemLayout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 12 },\r\n  };\r\n\r\n  onFinish = values => {\r\n    console.log('Received values of form: ', values);\r\n  };\r\n  \r\n  render(){\r\n    return (\r\n        <Typography>\r\n          <Title level={4}>目标检测</Title>\r\n          <Divider />\r\n          <Paragraph>\r\n            相关介绍\r\n          </Paragraph>\r\n          <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n            <Col span={11}>\r\n              <Card title=\"输入\" bordered={true} style={{height:'100%'}}>\r\n                <Form {...this.formItemLayout} onFinish={this.onFinish}>\r\n                  <Form.Item label=\"上传图片\">\r\n                    <PicturesWall max_pic={1}></PicturesWall>\r\n                  </Form.Item>\r\n                  <Form.Item wrapperCol={{ span: 18, offset: 8}}>\r\n                    <Button type=\"primary\" htmlType=\"submit\">\r\n                      Submit\r\n                    </Button>\r\n                  </Form.Item>\r\n                </Form>\r\n              </Card>\r\n            </Col>\r\n            <Col span={11}>\r\n              <Card title=\"输出\" bordered={true} style={{height:'100%'}}>\r\n                <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Typography>\r\n      )\r\n  }\r\n}","import React from 'react';\r\nimport PicturesWall from './pics'\r\nimport {Form,Button, Typography, Divider,Row, Col,Card,Empty} from 'antd';\r\n\r\nconst { Title, Paragraph, Text } = Typography;\r\n\r\nexport default class Sift extends React.Component{\r\n    formItemLayout = {\r\n      labelCol: { span: 8 },\r\n      wrapperCol: { span: 12 },\r\n    };\r\n  \r\n    onFinish = values => {\r\n      console.log('Received values of form: ', values);\r\n    };\r\n    \r\n    render(){\r\n      return (\r\n          <Typography>\r\n            <Title level={4}>SIFT尺度不变特征检测</Title>\r\n            <Divider />\r\n            <Paragraph>\r\n              相关介绍\r\n            </Paragraph>\r\n            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n              <Col span={11}>\r\n                <Card title=\"输入\" bordered={true} style={{height:'100%'}}>\r\n                  <Form {...this.formItemLayout} onFinish={this.onFinish}>\r\n                    <Form.Item label=\"上传图片\">\r\n                      <PicturesWall max_pic={1}></PicturesWall>\r\n                    </Form.Item>\r\n                    <Form.Item wrapperCol={{ span: 18, offset: 8}}>\r\n                      <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </Form>\r\n                </Card>\r\n              </Col>\r\n              <Col span={11}>\r\n                <Card title=\"输出\" bordered={true} style={{height:'100%'}}>\r\n                  <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </Typography>\r\n        )\r\n    }\r\n  }","import React from 'react';\r\nimport PicturesWall from './pics'\r\nimport {Form,Button, Typography, Divider,Row, Col,Card,Empty} from 'antd';\r\n\r\nconst { Title, Paragraph, Text } = Typography;\r\n\r\nexport default class Stitch extends React.Component{\r\n    formItemLayout = {\r\n      labelCol: { span: 8 },\r\n      wrapperCol: { span: 12 },\r\n    };\r\n  \r\n    onFinish = values => {\r\n      console.log('Received values of form: ', values);\r\n    };\r\n    \r\n    render(){\r\n      return (\r\n          <Typography>\r\n            <Title level={4}>全景拼接（Panorama Stitching）</Title>\r\n            <Divider />\r\n            <Paragraph>\r\n              相关介绍\r\n            </Paragraph>\r\n            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n              <Col span={11}>\r\n                <Card title=\"输入\" bordered={true} style={{height:'100%'}}>\r\n                  <Form {...this.formItemLayout} onFinish={this.onFinish}>\r\n                    <Form.Item label=\"上传图片\">\r\n                      <PicturesWall max_pic={1}></PicturesWall>\r\n                    </Form.Item>\r\n                    <Form.Item wrapperCol={{ span: 18, offset: 8}}>\r\n                      <Button type=\"primary\" htmlType=\"submit\">\r\n                        Submit\r\n                      </Button>\r\n                    </Form.Item>\r\n                  </Form>\r\n                </Card>\r\n              </Col>\r\n              <Col span={11}>\r\n                <Card title=\"输出\" bordered={true} style={{height:'100%'}}>\r\n                  <Empty image={Empty.PRESENTED_IMAGE_SIMPLE} />\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </Typography>\r\n        )\r\n    }\r\n  }","import './App.css';\nimport React from 'react';\nimport { Layout, Menu, Breadcrumb ,Button} from 'antd';\nimport { CodeSandboxOutlined, PropertySafetyFilled,MenuUnfoldOutlined,MenuFoldOutlined,MonitorOutlined\n,PictureOutlined,ProjectOutlined  } from '@ant-design/icons';\nimport Detection from './detection'\nimport Sift from './sift'\nimport Stitch from './stitch'\nconst { Header, Content, Sider,Footer } = Layout;\n\nexport default class App extends React.Component {\n  handleClick = e => {\n    console.log(e.key);\n    if(e.key===\"1\"){\n      this.setState ({content:<Sift></Sift>})\n    }\n    else if(e.key===\"2\"){\n      this.setState ({content:<Stitch></Stitch>})\n    }\n    else if(e.key===\"3\"){\n      this.setState ({content: <Detection></Detection>})\n    }\n    console.log(this.state.content)\n  };\n  toggleCollapsed = () => {\n    this.setState({\n      collapsed: !this.state.collapsed,\n    });\n  };\n  state = {\n    content : <Sift></Sift>,\n    collapsed: false,\n  }\n  render(){\n    return (\n      <Layout>\n        <Header className=\"my_head\">\n          <CodeSandboxOutlined style={{ padding: '12px' }}/>\n          计算机视觉工具箱\n        </Header>\n        <Layout className=\"my_body\">\n          <Sider className=\"my_body\" collapsed={this.state.collapsed}>\n            <Button type=\"primary\" onClick={this.toggleCollapsed} style={{ marginBottom: 0}}>\n              {React.createElement(this.state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined)}\n            </Button>\n            <Menu \n              onClick={this.handleClick}\n              mode=\"inline\"\n              defaultSelectedKeys={['1']}\n              theme=\"light\"\n              className=\"my_menu\"\n            >\n              <Menu.Item key=\"1\" icon={<MonitorOutlined />}>\n                SIFT特征检测\n              </Menu.Item>\n              <Menu.Item key=\"2\" icon={<PictureOutlined />}>\n                全景拼接\n              </Menu.Item>\n              <Menu.Item key=\"3\" icon={<ProjectOutlined />}>\n                目标检测\n              </Menu.Item>\n            </Menu>\n          </Sider>\n          <Content className=\"my_content\">\n              {this.state.content}\n          </Content>\n        </Layout>\n        <Footer className=\"my_foot\">\n          copyright@2020 &nbsp; 1754225 NingXinzhi &nbsp; 17717084193@163.com\n        </Footer>\n      </Layout>\n    );\n  }\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}